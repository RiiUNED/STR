import java.util.concurrent.locks.*;

public class Bridge {
    private int count = 0;
    private Direction direction = null;
    private final ReentrantLock lock = new ReentrantLock();
    private final Condition northQueue = lock.newCondition();
    private final Condition southQueue = lock.newCondition();
    private int northWaiting = 0;
    private int southWaiting = 0;

    public void cross(String name, Direction threadDirection) throws InterruptedException {
        lock.lock();
        try {
            if (direction == null) {
                direction = threadDirection;
            } else if (direction != threadDirection) {
                if (threadDirection == Direction.NORTH && northWaiting == 0) {
                    southWaiting++;
                    southQueue.await();
                    southWaiting--;
                } else if (threadDirection == Direction.SOUTH && southWaiting == 0) {
                    northWaiting++;
                    northQueue.await();
                    northWaiting--;
                } else {
                    lock.unlock();
                    Thread.yield();
                    lock.lock();
                }
            }

            count++;

            System.out.println(name + " is crossing the bridge from " + threadDirection + ".");

            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            System.out.println(name + " has crossed the bridge from " + threadDirection + ".");

            count--;

            if (count == 0) {
                direction = null;
                if (northWaiting > 0) {
                    northQueue.signalAll();
                } else if (southWaiting > 0) {
                    southQueue.signalAll();
                }
            }
        } finally {
            lock.unlock();
        }
    }
}