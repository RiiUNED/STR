import java.util.concurrent.locks.ReentrantLock;

public class Bridge {
    private int countNorth = 0;
    private int countSouth = 0;
    private final ReentrantLock lock = new ReentrantLock();

    public void cross(String name, Direction direction) {
        lock.lock();
        boolean canCross = false;
        if (direction == Direction.NORTH) {
            if (countNorth == 0) {
                canCross = true;
            }
            countNorth++;
        } else {
            if (countSouth == 0) {
                canCross = true;
            }
            countSouth++;
        }
        lock.unlock();

        if (!canCross) {
            try {
                Thread.sleep(1000); // Espera 1 segundo antes de intentar cruzar
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            cross(name, direction); // Vuelve a intentar cruzar
        } else {
            System.out.println(name + " is crossing the bridge from " + direction + ".");
            try {
                Thread.sleep(5000); // Cruza el puente
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(name + " has crossed the bridge from " + direction + ".");
            lock.lock();
            if (direction == Direction.NORTH) {
                countNorth--;
                if (countNorth == 0 && countSouth > 0) {
                    lock.unlock(); // Permitir a los hilos del sur cruzar el puente
                }
            } else {
                countSouth--;
                if (countSouth == 0 && countNorth > 0) {
                    lock.unlock(); // Permitir a los hilos del norte cruzar el puente
                }
            }
            lock.unlock();
        }
    }
}
