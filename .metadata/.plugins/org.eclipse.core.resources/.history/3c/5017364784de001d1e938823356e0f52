import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Bridge {
    private int count = 0;
    
    private final ReentrantLock lock = new ReentrantLock();

    public void cross(Th thread) throws InterruptedException {
    	int counter = 0;
    	long now = System.currentTimeMillis();
        double t = (now - thread.getStart())/1000;
        lock.lock();
        try {
        	counter++;
        } finally {
        	lock.unlock();
        }
        System.out.println(t+ " " + thread.getName()+" try to cross the bridge");
    	lock.lock();
    	try {
    		System.out.println("counter: " +  counter);
    		now = System.currentTimeMillis();
        	t = (now - thread.getStart())/1000;
    		System.out.println(t + " " + thread.getName() +" begin to croos the bridge");
        	thread.sleep(5000);
        	now = System.currentTimeMillis();
        	t = (now - thread.getStart())/1000;
        	System.out.println(t+ " " + thread.getName() +" has crossed the bridge");	
    	}finally{
    		lock.unlock();
    	}
    	
    }
}
